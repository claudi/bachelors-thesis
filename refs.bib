@article{MOGGI199155,
    title = "Notions of computation and monads",
    journal = "Information and Computation",
    volume = "93",
    number = "1",
    pages = "55 - 92",
    year = "1991",
    note = "Selections from 1989 IEEE Symposium on Logic in Computer Science",
    issn = "0890-5401",
    doi = "https://doi.org/10.1016/0890-5401(91)90052-4",
    url = "http://www.sciencedirect.com/science/article/pii/0890540191900524",
    author = "Eugenio Moggi",
    abstract = "The λ-calculus is considered a useful mathematical tool in the study of programming languages, since programs can be identified with λ-terms. However, if one goes further and uses βη-conversion to prove equivalence of programs, then a gross simplification is introduced (programs are identified with total functions from values to values) that may jeopardise the applicability of theoretical results. In this paper we introduce calculi, based on a categorical semantics for computations, that provide a correct basis for proving equivalence of programs for a wide range of notions of computation.",
}

@mastersthesis{tothKleisli,
    author    = "T{\'o}th, Stijn",
    title     = "Kleisli Monoids",
    school    = "Vrije Universiteit Brussel",
    ?_type    = "master's thesis",
    ?_address = "",
    year      = "2014",
    ?_month   = "",
    ?_note    = "",
}

@Article{SussPureFunctionParallelization,
    author={S{\"u}{\ss}, Tim
            and Nagel, Lars
            and Vef, Marc-Andr{\'e}
            and Brinkmann, Andr{\'e}
            and Feld, Dustin
            and Soddemann, Thomas},
    title={Pure Functions in C: A Small Keyword for Automatic Parallelization},
    journal={International Journal of Parallel Programming},
    year={2021},
    month={02},
    day={01},
    volume={49},
    number={1},
    pages={1-24},
    abstract={The need for parallel task execution has been steadily growing in recent years since manufacturers mainly improve processor performance by increasing the number of installed cores instead of scaling the processor's frequency. To make use of this potential, an essential technique to increase the parallelism of a program is to parallelize loops. Several automatic loop nest parallelizers have been developed in the past such as PluTo. The main restriction of these tools is that the loops must be statically analyzable which, among other things, disallows function calls within the loops. In this article, we present a seemingly simple extension to the C programming language which marks functions without side-effects. These functions can then basically be ignored when the automatic parallelizer checks the parallelizability of loops. We integrated the approach into the GCC compiler toolchain and evaluated it by running several real-world applications. Our experiments show that the C extension helps to identify additional parallelization opportunities and, thus, to significantly increase the performance of applications.},
    issn={1573-7640},
    doi={10.1007/s10766-020-00660-4},
    url={https://doi.org/10.1007/s10766-020-00660-4}
}

@article{frostMemorization,
  title={Using memorization to achieve polynomial complexity of purely functional executable specifications of non-deterministic top-down parsers},
  author={Frost, Richard A.},
  journal={ACM SIGPLAN Notices},
  volume={29},
  number={4},
  pages={23--30},
  year={1994},
  publisher={ACM New York, NY, USA}
}

@misc{enwiki:1023837642,
    author="{Wikipedia contributors}",
    title="Comparison of multi-paradigm programming languages --- {Wikipedia}{,} The Free Encyclopedia",
    year="2021",
    url="https://en.wikipedia.org/w/index.php?title=Comparison_of_multi-paradigm_programming_languages&oldid=1023837642",
    urldate="2021-06-24"
}

@misc{gccdoc:attributes,
    author="{Free Software Foundation, Inc.}",
    title="§6.33.1 Common Function Attributes",
    year="2021",
    url="https://gcc.gnu.org/onlinedocs/gcc-11.1.0/gcc/Common-Function-Attributes.html",
    urldate="2021-06-24"
}

@online{Simeone,
    author={Peyton Jones, Simeone},
    title="Simeone Peyton Jones at Microsoft Research",
    year="2021",
    url="http://research.microsoft.com/~simonpj",
    urldate="2021-06-24"
}

@online{haskell-useless,
    title = {Haskell is useless},
    date = {2012},
    organization = {Youtube},
    author = {},
    url = {https://youtu.be/iSmkqocn0oQ},
    urldate="2021-06-24"
}

@online{paradigms-overview,
    title={Overview of the four main programming paradigms},
    date={2011},
    organization={Aalborg University},
    author={Nørmark, Kurt},
    url={https://people.cs.aau.dk/~normark/prog3-03/html/notes/paradigms_themes-paradigm-overview-section.html#paradigms_functional-paradigm-overview_title_1},
    urldate="2021-06-24"
}

@online{haskell-org-docs,
    title={Documentation},
    organization={Haskell.org},
    author={The Haskell Foundation},
    url={https://www.haskell.org/documentation/},
    urldate="2021-06-26",
}

@article{Moggi-notions-computation-monads,
    title = {Notions of computation and monads},
    journal = {Information and Computation},
    volume = {93},
    number = {1},
    pages = {55-92},
    year = {1991},
    note = {Selections from 1989 IEEE Symposium on Logic in Computer Science},
    issn = {0890-5401},
    doi = {https://doi.org/10.1016/0890-5401(91)90052-4},
    author = {Eugenio Moggi},
}
